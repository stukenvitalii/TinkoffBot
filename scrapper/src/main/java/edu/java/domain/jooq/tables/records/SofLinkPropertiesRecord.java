/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables.records;

import edu.java.domain.jooq.tables.SofLinkProperties;
import java.beans.ConstructorProperties;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SofLinkPropertiesRecord extends UpdatableRecordImpl<SofLinkPropertiesRecord>
    implements Record4<Long, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SOF_LINK_PROPERTIES.ID</code>.
     */
    public void setId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>SOF_LINK_PROPERTIES.ID</code>.
     */
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>SOF_LINK_PROPERTIES.LINK_ID</code>.
     */
    public void setLinkId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>SOF_LINK_PROPERTIES.LINK_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getLinkId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>SOF_LINK_PROPERTIES.ANSWER_COUNT</code>.
     */
    public void setAnswerCount(@NotNull Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>SOF_LINK_PROPERTIES.ANSWER_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getAnswerCount() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>SOF_LINK_PROPERTIES.COMMENT_COUNT</code>.
     */
    public void setCommentCount(@NotNull Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>SOF_LINK_PROPERTIES.COMMENT_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getCommentCount() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Long, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<Long, Long, Long, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return SofLinkProperties.SOF_LINK_PROPERTIES.ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return SofLinkProperties.SOF_LINK_PROPERTIES.LINK_ID;
    }

    @Override
    @NotNull
    public Field<Long> field3() {
        return SofLinkProperties.SOF_LINK_PROPERTIES.ANSWER_COUNT;
    }

    @Override
    @NotNull
    public Field<Long> field4() {
        return SofLinkProperties.SOF_LINK_PROPERTIES.COMMENT_COUNT;
    }

    @Override
    @NotNull
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public Long component2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Long component3() {
        return getAnswerCount();
    }

    @Override
    @NotNull
    public Long component4() {
        return getCommentCount();
    }

    @Override
    @NotNull
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public Long value2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Long value3() {
        return getAnswerCount();
    }

    @Override
    @NotNull
    public Long value4() {
        return getCommentCount();
    }

    @Override
    @NotNull
    public SofLinkPropertiesRecord value1(@NotNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public SofLinkPropertiesRecord value2(@NotNull Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public SofLinkPropertiesRecord value3(@NotNull Long value) {
        setAnswerCount(value);
        return this;
    }

    @Override
    @NotNull
    public SofLinkPropertiesRecord value4(@NotNull Long value) {
        setCommentCount(value);
        return this;
    }

    @Override
    @NotNull
    public SofLinkPropertiesRecord values(
        @NotNull Long value1,
        @NotNull Long value2,
        @NotNull Long value3,
        @NotNull Long value4
    ) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SofLinkPropertiesRecord
     */
    public SofLinkPropertiesRecord() {
        super(SofLinkProperties.SOF_LINK_PROPERTIES);
    }

    /**
     * Create a detached, initialised SofLinkPropertiesRecord
     */
    @ConstructorProperties({"id", "linkId", "answerCount", "commentCount"})
    public SofLinkPropertiesRecord(
        @NotNull Long id,
        @NotNull Long linkId,
        @NotNull Long answerCount,
        @NotNull Long commentCount
    ) {
        super(SofLinkProperties.SOF_LINK_PROPERTIES);

        setId(id);
        setLinkId(linkId);
        setAnswerCount(answerCount);
        setCommentCount(commentCount);
    }

    /**
     * Create a detached, initialised SofLinkPropertiesRecord
     */
    public SofLinkPropertiesRecord(edu.java.domain.jooq.tables.pojos.SofLinkProperties value) {
        super(SofLinkProperties.SOF_LINK_PROPERTIES);

        if (value != null) {
            setId(value.getId());
            setLinkId(value.getLinkId());
            setAnswerCount(value.getAnswerCount());
            setCommentCount(value.getCommentCount());
        }
    }
}
